'''
üß© –£—Ä–æ–≤–µ–Ω—å 1 ‚Äî –±–∞–∑–æ–≤—ã–π BFS (—Ä–µ—à—ë—Ç–∫–∞)
üö™ –ó–∞–¥–∞—á–∞ 1: ¬´–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞¬ª

–£—Å–ª–æ–≤–∏–µ:
–î–∞–Ω–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ N √ó M, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑:

'.' ‚Äî —Å–≤–æ–±–æ–¥–Ω–∞—è –∫–ª–µ—Ç–∫–∞,

'#' ‚Äî —Å—Ç–µ–Ω–∞,

'S' ‚Äî —Å—Ç–∞—Ä—Ç,

'E' ‚Äî –≤—ã—Ö–æ–¥.

–ù–∞–π–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤, —á—Ç–æ–±—ã –¥–æ–π—Ç–∏ –æ—Ç S –¥–æ E.
–•–æ–¥–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ —á–µ—Ç—ã—Ä—ë–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º (–≤–≤–µ—Ä—Ö, –≤–Ω–∏–∑, –≤–ª–µ–≤–æ, –≤–ø—Ä–∞–≤–æ).

–í–≤–æ–¥ –ø—Ä–∏–º–µ—Ä:

5 6
######
#S...#
#.##.#
#....#
##E###


–í—ã–≤–æ–¥:

7
'''

from collections import deque

def main():

    sy, sx = map(int, input().split())

    map_matrix = []

    start_x = -1
    start_y = -1

    for i in range(sy):
        floor = input()
        if floor.find('S') != -1:
            start_y = i
            start_x = floor.find('S')

        map_matrix.append(floor)

    dn = [[-1] * sx for i in range(sy)]

    q = deque()

    q.appendleft((start_y, start_x))

    dn[start_y][start_x] = 0

    available_steps = ((1, 0), (1, 0), (0, -1), (0, 1))

    while q:
        item = q.pop()

        for s in available_steps:
            if dn[item[0] + s[0]][item[1] + s[1]] == -1 and map_matrix[item[0] + s[0]][item[1] + s[1]] == '.':
                dn[item[0] + s[0]][item[1] + s[1]] = dn[item[0]][item[1]] + 1
                q.appendleft((item[0] + s[0], item[1] + s[1]))
            elif dn[item[0] + s[0]][item[1] + s[1]] == -1 and map_matrix[item[0] + s[0]][item[1] + s[1]] == 'E':
                dn[item[0] + s[0]][item[1] + s[1]] = dn[item[0]][item[1]] + 1
                print(dn[item[0] + s[0]][item[1] + s[1]])
                break



    



    
    


if __name__ == '__main__':
    main()